/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import arquitectura.Flow;
import arquitectura.Link;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import javax.swing.Timer;
import arquitectura.*;
import com.google.gson.internal.LinkedTreeMap;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.io.FileNotFoundException;
import java.net.ConnectException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.ListSelectionModel;
import javax.swing.border.BevelBorder;
import javax.swing.border.SoftBevelBorder;
import javax.swing.table.DefaultTableModel;
import tools.*;

/**
 * Main window
 * @author Alvaro Lus Martinez
 * @version 1.0
 */
public class Principal extends javax.swing.JFrame {

    private final int SWITCH = 0;
    private final int ID = 1;
    private final int ID_GRUPO = 2;
    private final int PRIORIDAD = 3;
    private final int ESTADO = 4;
    private final int PAQUETES = 5;
    private final int BYTES = 6;

    private final int ESTADO_METER = 2;
    private final int RATE_METER = 3;
    private final int BURST_METER = 4;
    private final int BYTES_METER = 5;

    private final int VPLS_NAME = 0;

    private final int TAB_METERS = 0;
    private final int TAB_QUEUES = 1;

    private final int ID_QUEUE = 0;
    private final int ID_SWITCH_QUEUE = 1;

    private Timer timerDevices;
    private Timer timerFlows;
    private Timer timerMeters;
    private Timer timerVpls;
    private Timer timerLinks;
    private Timer timerQueues;

    private List<JLabel> labels;

    /**
     * Creates new form Principal
     */
    public Principal() throws IOException {
        initComponents();
        labels = new ArrayList<JLabel>(Arrays.asList(this.jLabelEnlaces,
                this.jLabelFlows,
                this.jLabelQoS,
                this.jLabelTopologia,
                this.jLabelVpls,
                this.jLabelStatistics
        ));
        this.jLabelStatistics.setVisible(false);
        this.jLabelTopologiaMouseClicked(null);
        this.jLabelUserName.setText("Usuario: " + EntornoTools.user);
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
        EntornoTools.descubrirEntorno();
        EntornoTools.addDefaultQueues();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelBanner = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButtonDesconexion = new javax.swing.JButton();
        jLabelUserName = new javax.swing.JLabel();
        jPanelMenu = new javax.swing.JPanel();
        jLabelEnlaces = new javax.swing.JLabel();
        jLabelFlows = new javax.swing.JLabel();
        jLabelTopologia = new javax.swing.JLabel();
        jLabelQoS = new javax.swing.JLabel();
        jLabelVpls = new javax.swing.JLabel();
        jLabelStatistics = new javax.swing.JLabel();
        jPanelCard = new javax.swing.JPanel();
        jScrollPaneFlows = new javax.swing.JScrollPane();
        jListFlows = new javax.swing.JList<>();
        jPanelLinks = new javax.swing.JPanel();
        jScrollPaneLinks = new javax.swing.JScrollPane();
        jListLinks = new javax.swing.JList<>();
        jPanelFlows = new javax.swing.JPanel();
        jScrollPaneTable = new javax.swing.JScrollPane();
        jTableFlows = new javax.swing.JTable();
        jPanelDetalleFlow = new javax.swing.JPanel();
        jComboBoxSwitches = new javax.swing.JComboBox<>();
        jButtonNuevo = new javax.swing.JButton();
        jLabelSwitch = new javax.swing.JLabel();
        jButtonEliminar = new javax.swing.JButton();
        jButtonEliminarAll = new javax.swing.JButton();
        jPanelTopologia = new javax.swing.JPanel();
        jPanelVpls = new javax.swing.JPanel();
        jScrollPaneVpls = new javax.swing.JScrollPane();
        jTableVpls = new javax.swing.JTable();
        jPanelDetalleVpls = new javax.swing.JPanel();
        jButtonNuevoVpls = new javax.swing.JButton();
        jButtonEliminarVpls = new javax.swing.JButton();
        jTabbedPaneQoS = new javax.swing.JTabbedPane();
        jPanelMeters = new javax.swing.JPanel();
        jScrollPaneMeters = new javax.swing.JScrollPane();
        jTableMeters = new javax.swing.JTable();
        jPanelDetalleMeters = new javax.swing.JPanel();
        jComboBoxSwitchesMeters = new javax.swing.JComboBox<>();
        jButtonNewMeter = new javax.swing.JButton();
        jLabelSwitch1 = new javax.swing.JLabel();
        jButtonEliminarMeter = new javax.swing.JButton();
        jPanelQueue = new javax.swing.JPanel();
        jScrollPaneQueues = new javax.swing.JScrollPane();
        jTableQueues = new javax.swing.JTable();
        jPanelQueueDetails = new javax.swing.JPanel();
        jButtonDeleteQueue = new javax.swing.JButton();
        jButtonNewQueue = new javax.swing.JButton();
        jButtonDeleteAllQueue = new javax.swing.JButton();
        jPanelStatistics = new javax.swing.JPanel();
        jScrollPaneStatistics = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ONOS QoS");

        jPanelBanner.setBackground(new java.awt.Color(65, 76, 85));

        jLabel2.setFont(new java.awt.Font("Lucida Sans Typewriter", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("ONOS QoS");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/Untitled-5.png"))); // NOI18N

        jButtonDesconexion.setBackground(new java.awt.Color(37, 44, 51));
        jButtonDesconexion.setForeground(new java.awt.Color(255, 255, 255));
        jButtonDesconexion.setText("Desconectar");
        jButtonDesconexion.setBorderPainted(false);
        jButtonDesconexion.setOpaque(true);
        jButtonDesconexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDesconexionActionPerformed(evt);
            }
        });

        jLabelUserName.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        jLabelUserName.setForeground(new java.awt.Color(204, 204, 204));
        jLabelUserName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanelBannerLayout = new javax.swing.GroupLayout(jPanelBanner);
        jPanelBanner.setLayout(jPanelBannerLayout);
        jPanelBannerLayout.setHorizontalGroup(
            jPanelBannerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBannerLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelUserName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDesconexion)
                .addGap(19, 19, 19))
        );
        jPanelBannerLayout.setVerticalGroup(
            jPanelBannerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBannerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBannerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                    .addGroup(jPanelBannerLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(jPanelBannerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jButtonDesconexion)
                            .addComponent(jLabelUserName))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanelMenu.setBackground(new java.awt.Color(160, 164, 168));

        jLabelEnlaces.setBackground(new java.awt.Color(96, 97, 106));
        jLabelEnlaces.setForeground(new java.awt.Color(255, 255, 255));
        jLabelEnlaces.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelEnlaces.setText("     Enlaces");
        jLabelEnlaces.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.darkGray, null, null));
        jLabelEnlaces.setName("Enlaces"); // NOI18N
        jLabelEnlaces.setOpaque(true);
        jLabelEnlaces.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelEnlacesMouseClicked(evt);
            }
        });

        jLabelFlows.setBackground(new java.awt.Color(96, 97, 106));
        jLabelFlows.setForeground(new java.awt.Color(255, 255, 255));
        jLabelFlows.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelFlows.setText("     Flujos");
        jLabelFlows.setToolTipText("");
        jLabelFlows.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.darkGray, null, null));
        jLabelFlows.setName("Flujos"); // NOI18N
        jLabelFlows.setOpaque(true);
        jLabelFlows.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelFlowsMouseClicked(evt);
            }
        });

        jLabelTopologia.setBackground(new java.awt.Color(96, 97, 106));
        jLabelTopologia.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTopologia.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelTopologia.setText("     Topología");
        jLabelTopologia.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.darkGray, null, null));
        jLabelTopologia.setName("Topologia"); // NOI18N
        jLabelTopologia.setOpaque(true);
        jLabelTopologia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelTopologiaMouseClicked(evt);
            }
        });

        jLabelQoS.setBackground(new java.awt.Color(96, 97, 106));
        jLabelQoS.setForeground(new java.awt.Color(255, 255, 255));
        jLabelQoS.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelQoS.setText("     QoS");
        jLabelQoS.setToolTipText("");
        jLabelQoS.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.darkGray, null, null));
        jLabelQoS.setName("QoS"); // NOI18N
        jLabelQoS.setOpaque(true);
        jLabelQoS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelQoSMouseClicked(evt);
            }
        });

        jLabelVpls.setBackground(new java.awt.Color(96, 97, 106));
        jLabelVpls.setForeground(new java.awt.Color(255, 255, 255));
        jLabelVpls.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelVpls.setText("     Vpls");
        jLabelVpls.setToolTipText("");
        jLabelVpls.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.darkGray, null, null));
        jLabelVpls.setName("Vpls"); // NOI18N
        jLabelVpls.setOpaque(true);
        jLabelVpls.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelVplsMouseClicked(evt);
            }
        });

        jLabelStatistics.setBackground(new java.awt.Color(96, 97, 106));
        jLabelStatistics.setForeground(new java.awt.Color(255, 255, 255));
        jLabelStatistics.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelStatistics.setText("     Estadístcas");
        jLabelStatistics.setToolTipText("");
        jLabelStatistics.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.darkGray, null, null));
        jLabelStatistics.setName("Estadísticas"); // NOI18N
        jLabelStatistics.setOpaque(true);
        jLabelStatistics.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelStatisticsMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelMenuLayout = new javax.swing.GroupLayout(jPanelMenu);
        jPanelMenu.setLayout(jPanelMenuLayout);
        jPanelMenuLayout.setHorizontalGroup(
            jPanelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelEnlaces, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabelFlows, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
            .addComponent(jLabelTopologia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabelQoS, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
            .addComponent(jLabelVpls, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
            .addComponent(jLabelStatistics, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
        );
        jPanelMenuLayout.setVerticalGroup(
            jPanelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMenuLayout.createSequentialGroup()
                .addComponent(jLabelTopologia, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabelEnlaces, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabelFlows, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabelQoS, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabelVpls, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabelStatistics, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabelFlows.getAccessibleContext().setAccessibleName("FlujosTabla");
        jLabelStatistics.getAccessibleContext().setAccessibleName("     Estadísticas");

        jPanelCard.setBackground(new java.awt.Color(255, 255, 255));
        jPanelCard.setLayout(new java.awt.CardLayout());

        jScrollPaneFlows.setName("jScrollPaneFlows"); // NOI18N

        jListFlows.setModel(new javax.swing.DefaultListModel<Flow>());
        jListFlows.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListFlowsMouseClicked(evt);
            }
        });
        jScrollPaneFlows.setViewportView(jListFlows);

        jPanelCard.add(jScrollPaneFlows, "jScrollPaneFlows");

        jPanelLinks.setName("jPanelLinks"); // NOI18N

        jScrollPaneLinks.setName("jScrollPaneLinks"); // NOI18N

        jListLinks.setModel(new javax.swing.DefaultListModel<Link>());
        jScrollPaneLinks.setViewportView(jListLinks);

        javax.swing.GroupLayout jPanelLinksLayout = new javax.swing.GroupLayout(jPanelLinks);
        jPanelLinks.setLayout(jPanelLinksLayout);
        jPanelLinksLayout.setHorizontalGroup(
            jPanelLinksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 811, Short.MAX_VALUE)
            .addGroup(jPanelLinksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPaneLinks, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 811, Short.MAX_VALUE))
        );
        jPanelLinksLayout.setVerticalGroup(
            jPanelLinksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 407, Short.MAX_VALUE)
            .addGroup(jPanelLinksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPaneLinks, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE))
        );

        jPanelCard.add(jPanelLinks, "jPanelLinks");

        jPanelFlows.setName("jPanelFlows"); // NOI18N

        jScrollPaneTable.setName("jScrollPaneTable"); // NOI18N

        jTableFlows.setAutoCreateRowSorter(true);
        jTableFlows.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Switch", "Id", "Prioridad", "Estado", "Selector", "Nº Paquetes", "Nº Bytes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableFlows.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTableFlows.setName(""); // NOI18N
        jTableFlows.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTableFlows.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTableFlows.setShowGrid(false);
        jTableFlows.setShowVerticalLines(true);
        jTableFlows.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableFlowsMouseClicked(evt);
            }
        });
        jScrollPaneTable.setViewportView(jTableFlows);

        jPanelDetalleFlow.setName("jPanelDetalleFlow"); // NOI18N

        jComboBoxSwitches.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos" }));
        jComboBoxSwitches.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxFlujoSwitchesItemStateChanged(evt);
            }
        });

        jButtonNuevo.setBackground(new java.awt.Color(37, 44, 51));
        jButtonNuevo.setForeground(new java.awt.Color(255, 255, 255));
        jButtonNuevo.setBorderPainted(false);
        jButtonNuevo.setLabel("Añadir flujo");
        jButtonNuevo.setOpaque(true);
        jButtonNuevo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonNuevoFlujoMouseClicked(evt);
            }
        });

        jLabelSwitch.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jLabelSwitch.setText("Switch:");

        jButtonEliminar.setBackground(new java.awt.Color(37, 44, 51));
        jButtonEliminar.setForeground(new java.awt.Color(255, 255, 255));
        jButtonEliminar.setBorderPainted(false);
        jButtonEliminar.setLabel("Eliminar flujo");
        jButtonEliminar.setOpaque(true);
        jButtonEliminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonEliminarFlujoMouseClicked(evt);
            }
        });

        jButtonEliminarAll.setBackground(new java.awt.Color(37, 44, 51));
        jButtonEliminarAll.setForeground(new java.awt.Color(255, 255, 255));
        jButtonEliminarAll.setText("Eliminar todos");
        jButtonEliminarAll.setBorderPainted(false);
        jButtonEliminarAll.setOpaque(true);
        jButtonEliminarAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonEliminarAllFlujoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelDetalleFlowLayout = new javax.swing.GroupLayout(jPanelDetalleFlow);
        jPanelDetalleFlow.setLayout(jPanelDetalleFlowLayout);
        jPanelDetalleFlowLayout.setHorizontalGroup(
            jPanelDetalleFlowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDetalleFlowLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelSwitch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jComboBoxSwitches, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDetalleFlowLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelDetalleFlowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonEliminarAll, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );
        jPanelDetalleFlowLayout.setVerticalGroup(
            jPanelDetalleFlowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDetalleFlowLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanelDetalleFlowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSwitches, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSwitch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonNuevo)
                .addGap(18, 18, 18)
                .addComponent(jButtonEliminar)
                .addGap(18, 18, 18)
                .addComponent(jButtonEliminarAll)
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout jPanelFlowsLayout = new javax.swing.GroupLayout(jPanelFlows);
        jPanelFlows.setLayout(jPanelFlowsLayout);
        jPanelFlowsLayout.setHorizontalGroup(
            jPanelFlowsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFlowsLayout.createSequentialGroup()
                .addComponent(jScrollPaneTable, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
                .addGap(6, 6, 6)
                .addComponent(jPanelDetalleFlow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelFlowsLayout.setVerticalGroup(
            jPanelFlowsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneTable, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
            .addComponent(jPanelDetalleFlow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanelCard.add(jPanelFlows, "jPanelFlows");

        jPanelTopologia.setName("jPanelTopologia"); // NOI18N
        jPanelTopologia.setLayout(new java.awt.GridLayout(1, 0));
        jPanelCard.add(jPanelTopologia, "jPanelTopologia");

        jPanelVpls.setName("jPanelVpls"); // NOI18N

        jTableVpls.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre VPLS", "Lista Hosts", "Encapsulación"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneVpls.setViewportView(jTableVpls);

        jPanelDetalleVpls.setName("jPanelDetalleFlow"); // NOI18N
        jPanelDetalleVpls.setPreferredSize(new java.awt.Dimension(237, 160));

        jButtonNuevoVpls.setBackground(new java.awt.Color(37, 44, 51));
        jButtonNuevoVpls.setForeground(new java.awt.Color(255, 255, 255));
        jButtonNuevoVpls.setText("Añadir VPLS");
        jButtonNuevoVpls.setBorderPainted(false);
        jButtonNuevoVpls.setOpaque(true);
        jButtonNuevoVpls.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonNuevoVplsMouseClicked(evt);
            }
        });

        jButtonEliminarVpls.setBackground(new java.awt.Color(37, 44, 51));
        jButtonEliminarVpls.setForeground(new java.awt.Color(255, 255, 255));
        jButtonEliminarVpls.setText("Eliminar VPLS");
        jButtonEliminarVpls.setBorderPainted(false);
        jButtonEliminarVpls.setOpaque(true);
        jButtonEliminarVpls.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonEliminarVplsMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelDetalleVplsLayout = new javax.swing.GroupLayout(jPanelDetalleVpls);
        jPanelDetalleVpls.setLayout(jPanelDetalleVplsLayout);
        jPanelDetalleVplsLayout.setHorizontalGroup(
            jPanelDetalleVplsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDetalleVplsLayout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addGroup(jPanelDetalleVplsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonNuevoVpls, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonEliminarVpls, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );
        jPanelDetalleVplsLayout.setVerticalGroup(
            jPanelDetalleVplsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDetalleVplsLayout.createSequentialGroup()
                .addContainerGap(311, Short.MAX_VALUE)
                .addComponent(jButtonNuevoVpls)
                .addGap(18, 18, 18)
                .addComponent(jButtonEliminarVpls)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout jPanelVplsLayout = new javax.swing.GroupLayout(jPanelVpls);
        jPanelVpls.setLayout(jPanelVplsLayout);
        jPanelVplsLayout.setHorizontalGroup(
            jPanelVplsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelVplsLayout.createSequentialGroup()
                .addComponent(jScrollPaneVpls, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelDetalleVpls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelVplsLayout.setVerticalGroup(
            jPanelVplsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneVpls, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jPanelDetalleVpls, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
        );

        jPanelCard.add(jPanelVpls, "jPanelVpls");

        jTabbedPaneQoS.setName("jTabbedPaneQoS"); // NOI18N
        jTabbedPaneQoS.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPaneQoSStateChanged(evt);
            }
        });

        jTableMeters.setAutoCreateRowSorter(true);
        jTableMeters.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Switch", "Meter Id", "State", "Rate", "Burst", "Nº Bytes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableMeters.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableMeters.setShowHorizontalLines(false);
        jScrollPaneMeters.setViewportView(jTableMeters);

        jPanelDetalleMeters.setName("jPanelDetalleFlow"); // NOI18N

        jComboBoxSwitchesMeters.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos" }));
        jComboBoxSwitchesMeters.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxSwitchesMetersItemStateChanged(evt);
            }
        });

        jButtonNewMeter.setBackground(new java.awt.Color(37, 44, 51));
        jButtonNewMeter.setForeground(new java.awt.Color(255, 255, 255));
        jButtonNewMeter.setText("Añadir meter");
        jButtonNewMeter.setBorderPainted(false);
        jButtonNewMeter.setOpaque(true);
        jButtonNewMeter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonNewMeterMouseClicked(evt);
            }
        });

        jLabelSwitch1.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jLabelSwitch1.setText("Switch:");

        jButtonEliminarMeter.setBackground(new java.awt.Color(37, 44, 51));
        jButtonEliminarMeter.setForeground(new java.awt.Color(255, 255, 255));
        jButtonEliminarMeter.setText("Eliminar meter");
        jButtonEliminarMeter.setBorderPainted(false);
        jButtonEliminarMeter.setOpaque(true);
        jButtonEliminarMeter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonEliminarMeterMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelDetalleMetersLayout = new javax.swing.GroupLayout(jPanelDetalleMeters);
        jPanelDetalleMeters.setLayout(jPanelDetalleMetersLayout);
        jPanelDetalleMetersLayout.setHorizontalGroup(
            jPanelDetalleMetersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDetalleMetersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDetalleMetersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelDetalleMetersLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanelDetalleMetersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonNewMeter, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonEliminarMeter, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(jPanelDetalleMetersLayout.createSequentialGroup()
                        .addComponent(jLabelSwitch1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBoxSwitchesMeters, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanelDetalleMetersLayout.setVerticalGroup(
            jPanelDetalleMetersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDetalleMetersLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanelDetalleMetersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSwitchesMeters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSwitch1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonNewMeter)
                .addGap(18, 18, 18)
                .addComponent(jButtonEliminarMeter)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout jPanelMetersLayout = new javax.swing.GroupLayout(jPanelMeters);
        jPanelMeters.setLayout(jPanelMetersLayout);
        jPanelMetersLayout.setHorizontalGroup(
            jPanelMetersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMetersLayout.createSequentialGroup()
                .addComponent(jScrollPaneMeters, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelDetalleMeters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelMetersLayout.setVerticalGroup(
            jPanelMetersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelDetalleMeters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPaneMeters, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
        );

        jTabbedPaneQoS.addTab("Meters", jPanelMeters);

        jTableQueues.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Switch", "Puerto", "Max. rate", "Min. rate", "Burst"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneQueues.setViewportView(jTableQueues);

        jButtonDeleteQueue.setBackground(new java.awt.Color(37, 44, 51));
        jButtonDeleteQueue.setForeground(new java.awt.Color(255, 255, 255));
        jButtonDeleteQueue.setText("Eliminar cola");
        jButtonDeleteQueue.setBorderPainted(false);
        jButtonDeleteQueue.setOpaque(true);
        jButtonDeleteQueue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonDeleteQueueMouseClicked(evt);
            }
        });

        jButtonNewQueue.setBackground(new java.awt.Color(37, 44, 51));
        jButtonNewQueue.setForeground(new java.awt.Color(255, 255, 255));
        jButtonNewQueue.setText("Añadir cola");
        jButtonNewQueue.setBorderPainted(false);
        jButtonNewQueue.setOpaque(true);
        jButtonNewQueue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonNewQueueMouseClicked(evt);
            }
        });

        jButtonDeleteAllQueue.setBackground(new java.awt.Color(37, 44, 51));
        jButtonDeleteAllQueue.setForeground(new java.awt.Color(255, 255, 255));
        jButtonDeleteAllQueue.setText("Eliminar todas");
        jButtonDeleteAllQueue.setBorderPainted(false);
        jButtonDeleteAllQueue.setOpaque(true);
        jButtonDeleteAllQueue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonDeleteAllQueueMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelQueueDetailsLayout = new javax.swing.GroupLayout(jPanelQueueDetails);
        jPanelQueueDetails.setLayout(jPanelQueueDetailsLayout);
        jPanelQueueDetailsLayout.setHorizontalGroup(
            jPanelQueueDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelQueueDetailsLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(jPanelQueueDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonDeleteAllQueue, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonNewQueue, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleteQueue, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );
        jPanelQueueDetailsLayout.setVerticalGroup(
            jPanelQueueDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelQueueDetailsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonNewQueue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonDeleteQueue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonDeleteAllQueue))
        );

        javax.swing.GroupLayout jPanelQueueLayout = new javax.swing.GroupLayout(jPanelQueue);
        jPanelQueue.setLayout(jPanelQueueLayout);
        jPanelQueueLayout.setHorizontalGroup(
            jPanelQueueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelQueueLayout.createSequentialGroup()
                .addComponent(jScrollPaneQueues, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelQueueDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelQueueLayout.setVerticalGroup(
            jPanelQueueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelQueueLayout.createSequentialGroup()
                .addGroup(jPanelQueueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelQueueLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPaneQueues, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE))
                    .addComponent(jPanelQueueDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPaneQoS.addTab("Queues", jPanelQueue);

        jPanelCard.add(jTabbedPaneQoS, "jTabbedPaneQoS");

        jPanelStatistics.setName("jPanelStatistics"); // NOI18N

        javax.swing.GroupLayout jPanelStatisticsLayout = new javax.swing.GroupLayout(jPanelStatistics);
        jPanelStatistics.setLayout(jPanelStatisticsLayout);
        jPanelStatisticsLayout.setHorizontalGroup(
            jPanelStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 811, Short.MAX_VALUE)
            .addGroup(jPanelStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelStatisticsLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPaneStatistics, javax.swing.GroupLayout.PREFERRED_SIZE, 777, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanelStatisticsLayout.setVerticalGroup(
            jPanelStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 407, Short.MAX_VALUE)
            .addGroup(jPanelStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelStatisticsLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPaneStatistics, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jPanelCard.add(jPanelStatistics, "jPanelStatistics");
        jPanelStatistics.getAccessibleContext().setAccessibleName("jPanelStatistics");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelBanner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanelCard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelBanner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelCard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Click event for Link Menu
     *
     * @param evt click event
     */
    private void jLabelEnlacesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelEnlacesMouseClicked
        CardLayout card = (CardLayout) jPanelCard.getLayout();
        card.show(jPanelCard, jPanelLinks.getName());
        Principal p = this;
        // Change label appearence
        EntornoTools.pressLabel(jLabelEnlaces, labels);

        // If any of these timers are, running stop them
        TimerTools.stopTimer(timerFlows);
        TimerTools.stopTimer(timerMeters);
        TimerTools.stopTimer(timerQueues);
        TimerTools.stopTimer(timerDevices);
        TimerTools.stopTimer(timerVpls);

        try {
            // Update data
            EntornoTools.descubrirEntorno();

            // Update GUI
            EntornoTools.actualizarGUILinks(((DefaultListModel) jListLinks.getModel()), Entorno.mapSwitches);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(p, "ERROR. No se ha podido establecer conexión. No se pueden actualizar los datos.", "Error de conexión", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Timeout method
        ActionListener linksTimeout = new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                Link linkSelected = null;
                try {
                    //Update data
                    EntornoTools.descubrirEntorno();
                    JOptionPane.showMessageDialog(p, "ERROR. No se ha podido establecer conexión. No se pueden actualizar los datos.", "Error de conexión", JOptionPane.ERROR_MESSAGE);
                } catch (IOException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(p, "ERROR. No se ha podido establecer conexión. No se pueden actualizar los datos.", "Error de conexión", JOptionPane.ERROR_MESSAGE);
                }
                // Get link selected in the table
                if (jListLinks.getSelectedIndex() != -1) {
                    linkSelected = jListLinks.getSelectedValue();
                }

                // Update GUI
                EntornoTools.actualizarGUILinks(((DefaultListModel) jListLinks.getModel()), Entorno.mapSwitches);

                // Reselect link in the table
                if (linkSelected != null) {
                    jListLinks.setSelectedIndex(((DefaultListModel) jListLinks.getModel()).indexOf(linkSelected));
                }

            }
        };

        // Run timer if it is not already 
        timerLinks = TimerTools.runTimer(timerLinks, linksTimeout);

    }//GEN-LAST:event_jLabelEnlacesMouseClicked

    /**
     * Click event for Disconnection Button
     *
     * @param evt click event
     */
    private void jButtonDesconexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDesconexionActionPerformed
        // Stop all timers
        TimerTools.stopTimer(timerDevices);
        TimerTools.stopTimer(timerLinks);
        TimerTools.stopTimer(timerVpls);
        TimerTools.stopTimer(timerMeters);
        TimerTools.stopTimer(timerQueues);
        TimerTools.stopTimer(timerFlows);

        // Close principal window
        this.dispose();

        // Open login window
        JFrame login = new OnosFrame();
        login.setVisible(true);
        login.pack();
    }//GEN-LAST:event_jButtonDesconexionActionPerformed

    /**
     * Click event for Flows Menu
     *
     * @param evt
     */
    private void jLabelFlowsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelFlowsMouseClicked
        CardLayout card = (CardLayout) jPanelCard.getLayout();
        card.show(jPanelCard, jPanelFlows.getName());
        Principal p = this;
        // Change label appearence
        EntornoTools.pressLabel(jLabelFlows, labels);

        // Stop timers
        TimerTools.stopTimer(timerDevices);
        TimerTools.stopTimer(timerLinks);
        TimerTools.stopTimer(timerVpls);
        TimerTools.stopTimer(timerMeters);
        TimerTools.stopTimer(timerQueues);

        try {
            //Update data
            EntornoTools.descubrirEntorno();
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(p, "ERROR. No se ha podido establecer conexión. No se pueden actualizar los datos.", "Error de conexión", JOptionPane.ERROR_MESSAGE);
        }

        //Update GUI
        EntornoTools.actualizarGUIFlowsTable(jTableFlows, Entorno.mapSwitches.values());
        EntornoTools.actualizarBoxSwitches(jComboBoxSwitches);

        // Timeout method
        ActionListener flowsTimeout;
        flowsTimeout = new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    EntornoTools.descubrirEntorno();
                    List<String> idFlowsSeletedId = new ArrayList<String>();
                    int[] selectedRowsIndex = null;
                    ///
                    //SI SE SLEECCIONA FILA, SE GUARDA
                    ///

                    if (jTableFlows.getSelectedRow() != -1) {
                        selectedRowsIndex = jTableFlows.getSelectedRows();
                        for (int i = 0; i < selectedRowsIndex.length; i++) {
                            idFlowsSeletedId.add(((DefaultTableModel) jTableFlows.getModel()).getDataVector().get(selectedRowsIndex[i]).get(ID).toString());
                        }

                    }
                    //Actualizar listas

                    EntornoTools.actualizarGUIFlowsTable(jTableFlows, Entorno.mapSwitches.values());
                    EntornoTools.actualizarBoxSwitches(jComboBoxSwitches);
                    String idActual = "";
                    ListSelectionModel model = jTableFlows.getSelectionModel();
                    model.clearSelection();
                    for (int i = 0; i < jTableFlows.getRowCount(); i++) {
                        for (String idFlowSelected : idFlowsSeletedId) {
                            idActual = ((DefaultTableModel) jTableFlows.getModel()).getDataVector().get(i).get(ID).toString();
                            if (idActual.equals(idFlowSelected)) {
                                model.addSelectionInterval(i, i);
                            }
                        }
                    }
                    //Reseleccionar elemento de la lista
                    /*if(flowSelected != null)
                    (DefaultTableModel)jTableFlows
                    jListFlows.setSelectedIndex(((DefaultListModel)jListFlows.getModel()).indexOf(flowSelected));
                     */

                } catch (IOException e) {
                    System.out.println(e.getCause());
                    JOptionPane.showMessageDialog(p, "ERROR. No se ha podido establecer conexión. No se pueden actualizar los datos.", "Error de conexión", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();

                }

            }
        };

        timerFlows = TimerTools.runTimer(timerFlows, flowsTimeout);
    }//GEN-LAST:event_jLabelFlowsMouseClicked

    /**
     * Event when select an item in a switches combo box
     *
     * @param evt item event
     */
    private void jComboBoxFlujoSwitchesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxFlujoSwitchesItemStateChanged
        // If a switch is selected
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            // Stop all timers
            TimerTools.stopTimer(timerFlows);

            // Retrieve selected switch
            String sw = (String) jComboBoxSwitches.getSelectedItem();

            // If switch selected is not "todos" (all)
            if (!sw.equals("Todos")) {
                try {
                    //Update data
                    EntornoTools.descubrirEntorno();
                } catch (IOException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }

                //Get switch object
                Switch s = Entorno.mapSwitches.get(sw);

                //Update Table
                EntornoTools.actualizarGUIFlowsTableSwitch(jTableFlows, s);

                // Timeou method
                ActionListener flowsTimeout = new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        try {
                            EntornoTools.descubrirEntorno();
                            Flow flowSelected = null;
                            ///
                            //SI SE SLEECCIONA FILA, SE GUARDA
                            ///

                            //Actualizar listas
                            EntornoTools.actualizarGUIFlowsTableSwitch(jTableFlows, Entorno.mapSwitches.get(sw));

                            //Reseleccionar elemento de la lista
                            /*if(flowSelected != null)
                                (DefaultTableModel)jTableFlows
                                jListFlows.setSelectedIndex(((DefaultListModel)jListFlows.getModel()).indexOf(flowSelected));
                             */
                        } catch (IOException e) {
                            e.printStackTrace();
                        }

                    }
                };

                // If timer is not running starts it
                TimerTools.runTimer(timerFlows, flowsTimeout);

            } //If "todos" (all) is selected
            else {
                try {
                    //Update data
                    EntornoTools.descubrirEntorno();
                } catch (IOException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }

                // Update flow table
                EntornoTools.actualizarGUIFlowsTable(jTableFlows, Entorno.mapSwitches.values());

                // Method timeout
                ActionListener flowsTimeout = new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        Flow flowSelected = null;
                        try {
                            EntornoTools.descubrirEntorno();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }

                        ///
                        //SI SE SLEECCIONA FILA, SE GUARDA
                        ///
                        // Update flow table
                        EntornoTools.actualizarGUIFlowsTable(jTableFlows, Entorno.mapSwitches.values());

                        //Reseleccionar elemento de la lista
                        /*if(flowSelected != null)
                                (DefaultTableModel)jTableFlows
                                jListFlows.setSelectedIndex(((DefaultListModel)jListFlows.getModel()).indexOf(flowSelected));
                         */
                    }
                };

                // If timer is not running starts it
                TimerTools.runTimer(timerFlows, flowsTimeout);
            }
        }

    }//GEN-LAST:event_jComboBoxFlujoSwitchesItemStateChanged

    /**
     * New flow button click event
     *
     * @param evt
     */
    private void jButtonNuevoFlujoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonNuevoFlujoMouseClicked
        // Open a new window wth the selected item in the swtich combo box
        JDialog newFlow = new NuevoFlujoSocket();
        newFlow.setVisible(true);
    }//GEN-LAST:event_jButtonNuevoFlujoMouseClicked

    /**
     * Delete flow button click event
     *
     * @param evt
     */
    private void jButtonEliminarFlujoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonEliminarFlujoMouseClicked
        try {
            if (jTableFlows.getSelectedRow() != -1) {
                int[] selected = jTableFlows.getSelectedRows();
                for (int i = 0; i < selected.length; i++) {
                    selected[i] = jTableFlows.convertRowIndexToModel(selected[i]);
                }
                int resultado = -1;
                if (selected.length == 1) {
                    resultado = JOptionPane.showConfirmDialog(rootPane, "¿Desea eliminar el flujo " + ((DefaultTableModel) jTableFlows.getModel()).getDataVector().elementAt(selected[0]).get(ID).toString() + " del switch " + ((DefaultTableModel) jTableFlows.getModel()).getDataVector().elementAt(selected[0]).get(SWITCH).toString() + "?", "Eliminar flujo", WIDTH);
                } else if (selected.length > 1) {
                    resultado = JOptionPane.showConfirmDialog(rootPane, "¿Desea eliminar los " + selected.length + " flujos selecionados de la red?", "Eliminar flujo", WIDTH);
                }
                if (resultado == JOptionPane.OK_OPTION) {
                    String id = "";
                    try {
                        for (int i = 0; i < selected.length; i++) {
                            id = ((DefaultTableModel) jTableFlows.getModel()).getDataVector().elementAt(selected[i]).get(ID).toString();
                            String sw = ((DefaultTableModel) jTableFlows.getModel()).getDataVector().elementAt(selected[i]).get(SWITCH).toString();

                            System.out.println(HttpTools.doDelete(new URL(EntornoTools.endpointFlows + "/" + sw + "/" + id)));
                            if (selected.length == 1) {
                                JOptionPane.showMessageDialog(this, "Flujo " + id + " eliminado correctamente.", "Flujo eliminado", JOptionPane.INFORMATION_MESSAGE);
                            }

                        }
                        if (selected.length > 1) {
                            JOptionPane.showMessageDialog(this, "Flujos eliminados correctamente", "Exito", JOptionPane.INFORMATION_MESSAGE);
//                            JDialog acp = new NewOkCancelDialog(this, false, "Flujos eliminados correctamente");
//                            acp.setVisible(true);
//                            acp.pack();
                        }
                    } catch (IOException ex) {
                        System.err.println(ex.getMessage());
                        if (selected.length > 1) {
                            JOptionPane.showMessageDialog(this, "No se han podido eliminar los flujos correctamente.", "Error flujo", JOptionPane.ERROR_MESSAGE);
                        } else if (selected.length == 1) {
                            JOptionPane.showMessageDialog(this, "No se han podido eliminar el flujo correctamente.", "Error flujo", JOptionPane.ERROR_MESSAGE);

                        }
                    }

                }
            } else {
                JOptionPane.showMessageDialog(this, "Elija un flujo de la lista.", "Error flujo", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Elija un flujo de la lista.", "Error flujo", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButtonEliminarFlujoMouseClicked

    /**
     * Click event for Topologia label
     *
     * @param evt
     */
    private void jLabelTopologiaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelTopologiaMouseClicked
        Principal p = this;
        CardLayout card = (CardLayout) jPanelCard.getLayout();
        card.show(jPanelCard, this.jPanelTopologia.getName());

        // Change label appearence
        EntornoTools.pressLabel(jLabelTopologia, labels);

        //Stop all timers
        TimerTools.stopTimer(timerDevices);
        TimerTools.stopTimer(timerLinks);
        TimerTools.stopTimer(timerVpls);
        TimerTools.stopTimer(timerMeters);
        TimerTools.stopTimer(timerQueues);
        TimerTools.stopTimer(timerFlows);

        try {
            //Update data
            EntornoTools.descubrirEntorno();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(p, "ERROR. No se ha podido establecer conexión. No se pueden actualizar los datos.", "Error de conexión", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Update GUI
        EntornoTools.actualizarGUITopologia(jPanelTopologia);
//            ActionListener topologiaTimeout = new ActionListener() {
//                public void actionPerformed(ActionEvent evt) {
//                    try {
//                        EntornoTools.descubrirEntorno(entorno, usuario, password, controlador, parser);
//                        EntornoTools.actualizarGUITopologia(entorno, jPanelTopologia);
//                    } catch (IOException e) {
//                        e.printStackTrace();
//                    }
//                    
//                }
//            };
//            if(timerTopologia == null){
//                timerTopologia = new Timer(5000 ,topologiaTimeout);
//                timerTopologia.setRepeats(true); //Se repite cuando TRUE
//                timerTopologia.start();
//            }

    }//GEN-LAST:event_jLabelTopologiaMouseClicked

    /**
     * Click event for QoS label
     *
     * @param evt
     */
    private void jLabelQoSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelQoSMouseClicked
        //try{
        Principal p = this;
        CardLayout card = (CardLayout) jPanelCard.getLayout();
        card.show(jPanelCard, jTabbedPaneQoS.getName());

        // Change label appearence
        EntornoTools.pressLabel(jLabelQoS, labels);

        //Stop timers
        TimerTools.stopTimer(timerDevices);
        TimerTools.stopTimer(timerLinks);
        TimerTools.stopTimer(timerVpls);
        TimerTools.stopTimer(timerFlows);

//            EntornoTools.descubrirEntorno();
//            EntornoTools.actualizarGUITopologia(jPanelTopologia);
        // Select meter Tab
        jTabbedPaneQoS.setSelectedIndex(TAB_METERS);

        try {
            //Update data
            EntornoTools.descubrirEntorno();
            EntornoTools.getMeters();
        } catch (MalformedURLException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(p, "ERROR. No se ha podido establecer conexión. No se pueden actualizar los datos.", "Error de conexión", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(p, "ERROR. No se ha podido establecer conexión. No se pueden actualizar los datos.", "Error de conexión", JOptionPane.ERROR_MESSAGE);
        }

        //Update GUI
        EntornoTools.actualizarGUIMetersTable(jTableMeters, Entorno.getAllMeters());
        EntornoTools.actualizarBoxSwitches(jComboBoxSwitchesMeters);

        //Timeout method
        ActionListener metersTimeout = new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                String idMeterSelected = null;
                String idSwitchSelected = null;

                try {
                    //Update data
                    EntornoTools.descubrirEntorno();
                    EntornoTools.getMeters();
                } catch (IOException e) {
                    e.printStackTrace();
                }

                // Retrieve selected item from meter table
                if (jTableMeters.getSelectedRow() != -1) {
                    idMeterSelected = ((DefaultTableModel) jTableMeters.getModel()).getDataVector().get(jTableMeters.getSelectedRow()).get(ID).toString();
                    idSwitchSelected = ((DefaultTableModel) jTableMeters.getModel()).getDataVector().get(jTableMeters.getSelectedRow()).get(SWITCH).toString();
                }

                //Update GUI
                EntornoTools.actualizarGUIMetersTable(jTableMeters, Entorno.getAllMeters());
                EntornoTools.actualizarBoxSwitches(jComboBoxSwitchesMeters);

                // Reselect meter in table
                for (int i = 0; i < jTableMeters.getRowCount(); i++) {
                    if (((DefaultTableModel) jTableMeters.getModel()).getDataVector().get(i).get(ID).toString().equals(idMeterSelected) && ((DefaultTableModel) jTableMeters.getModel()).getDataVector().get(i).get(SWITCH).toString().equals(idSwitchSelected)) {
                        jTableMeters.setRowSelectionInterval(i, i);
                    }
                }
            }
        };

        // Run timer
        timerMeters = TimerTools.runTimer(timerMeters, metersTimeout);
    }//GEN-LAST:event_jLabelQoSMouseClicked

    /**
     * Click event for VPLS label
     *
     * @param evt
     */
    private void jLabelVplsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelVplsMouseClicked
        CardLayout card = (CardLayout) jPanelCard.getLayout();
        card.show(jPanelCard, jPanelVpls.getName());
        Principal p = this;
        // Change label appearence
        EntornoTools.pressLabel(jLabelVpls, labels);

        //Stop timers
        TimerTools.stopTimer(timerDevices);
        TimerTools.stopTimer(timerLinks);
        TimerTools.stopTimer(timerMeters);
        TimerTools.stopTimer(timerFlows);

        try {
            EntornoTools.getVpls();
            EntornoTools.actualizarGUIVplsTable(jTableVpls, Entorno.vpls);

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(p, "ERROR. No se ha podido establecer conexión. No se pueden actualizar los datos.", "Error de conexión", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        ActionListener vplsTimeout = new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    EntornoTools.descubrirEntorno();
                    String idVplsSelected = null;
                    ///
                    //SI SE SLEECCIONA FILA, SE GUARDA
                    ///
                    if (jTableVpls.getSelectedRow() != -1) {
                        idVplsSelected = ((DefaultTableModel) jTableVpls.getModel()).getDataVector().get(jTableVpls.getSelectedRow()).get(VPLS_NAME).toString();
                    }

                    //Actualizar listas
                    EntornoTools.getVpls();
                    EntornoTools.actualizarGUIVplsTable(jTableVpls, Entorno.vpls);

                    //Reseleccionar
                    for (int i = 0; i < jTableVpls.getRowCount(); i++) {
                        if (((DefaultTableModel) jTableVpls.getModel()).getDataVector().get(i).get(ID).toString().equals(idVplsSelected)) {
                            jTableVpls.setRowSelectionInterval(i, i);
                        }
                    }
                    //Reseleccionar elemento de la lista
                    /*if(flowSelected != null)
                            (DefaultTableModel)jTableFlows
                            jListFlows.setSelectedIndex(((DefaultListModel)jListFlows.getModel()).indexOf(flowSelected));
                     */

                } catch (IOException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(p, "ERROR. No se ha podido establecer conexión. No se pueden actualizar los datos.", "Error de conexión", JOptionPane.ERROR_MESSAGE);
                }

            }
        };

        timerVpls = TimerTools.runTimer(timerVpls, vplsTimeout);
//            EntornoTools.descubrirEntorno();
//            EntornoTools.actualizarGUITopologia(jPanelTopologia);
    }//GEN-LAST:event_jLabelVplsMouseClicked

    /**
     * Meter switch filter change event
     *
     * @param evt
     */
    private void jComboBoxSwitchesMetersItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxSwitchesMetersItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (timerMeters != null && timerMeters.isRunning()) {
                timerMeters.stop();
            }
            String sw = (String) jComboBoxSwitchesMeters.getSelectedItem();

            if (!sw.equals("Todos")) {
                try {
                    EntornoTools.descubrirEntorno();
                    EntornoTools.getMeters();

                    EntornoTools.actualizarGUIMetersTable(jTableMeters, EntornoTools.getMetersBySwitch(sw));
                    ActionListener metersTimeout;
                    metersTimeout = new ActionListener() {
                        public void actionPerformed(ActionEvent evt) {
                            try {
                                EntornoTools.descubrirEntorno();
                                Meter meterSelected = null;
                                ///
                                //SI SE SLEECCIONA FILA, SE GUARDA
                                ///

                                //Actualizar listas
                                EntornoTools.actualizarGUIMetersTable(jTableMeters, EntornoTools.getMetersBySwitch(sw));

                                //Reseleccionar elemento de la lista
                                /*if(flowSelected != null)
                                (DefaultTableModel)jTableFlows
                                jListFlows.setSelectedIndex(((DefaultListModel)jListFlows.getModel()).indexOf(flowSelected));
                                 */
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                        }
                    };
                    if (timerMeters != null && !timerMeters.isRunning()) {
                        timerMeters = new Timer(5000, metersTimeout);
                        timerMeters.setRepeats(true); //Se repite cuando TRUE
                        timerMeters.start();
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    EntornoTools.descubrirEntorno();
                    EntornoTools.getMeters();
                    EntornoTools.actualizarGUIMetersTable(jTableMeters, Entorno.getAllMeters());
                    ActionListener flowsTimeout = new ActionListener() {
                        public void actionPerformed(ActionEvent evt) {
                            try {
                                EntornoTools.descubrirEntorno();
                                Meter meterSelected = null;
                                ///
                                //SI SE SLEECCIONA FILA, SE GUARDA
                                ///

                                //Actualizar listas
                                EntornoTools.actualizarGUIMetersTable(jTableMeters, Entorno.getAllMeters());

                                //Reseleccionar elemento de la lista
                                /*if(flowSelected != null)
                                (DefaultTableModel)jTableFlows
                                jListFlows.setSelectedIndex(((DefaultListModel)jListFlows.getModel()).indexOf(flowSelected));
                                 */
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                        }
                    };
                    if (!timerMeters.isRunning()) {
                        timerMeters = new Timer(5000, flowsTimeout);
                        timerMeters.setRepeats(true); //Se repite cuando TRUE
                        timerMeters.start();
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jComboBoxSwitchesMetersItemStateChanged

    /**
     * New meter click button click event
     *
     * @param evt
     */
    private void jButtonNewMeterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonNewMeterMouseClicked
        try {
            // TODO add your handling code here:
            JDialog newMeter = new NuevoMeter();
            newMeter.setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonNewMeterMouseClicked

    /**
     * Meter delete button click event
     *
     * @param evt
     */
    private void jButtonEliminarMeterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonEliminarMeterMouseClicked
        String meterId = "";
        try {
            if (jTableMeters.getSelectedRow() != -1) {
                String id = ((DefaultTableModel) jTableMeters.getModel()).getDataVector().elementAt(jTableMeters.getSelectedRow()).get(ID).toString();
                String sw = ((DefaultTableModel) jTableMeters.getModel()).getDataVector().elementAt(jTableMeters.getSelectedRow()).get(SWITCH).toString();
                Flow flow = null;
                try {
                    int resultado = JOptionPane.showConfirmDialog(rootPane, "Desea eliminar el meter " + id + " del switch " + sw + "?", "Eliminar meter", WIDTH);
                    if (resultado == JOptionPane.OK_OPTION) {
                        for (Flow f : Entorno.mapSwitches.get(sw).getMapFlows().values()) {
                            FlowTreatment treatment = f.getFlowTreatment();
                            List<FlowInstruction> l = treatment.getListInstructions();
                            for (FlowInstruction instruction : l) {
//                                Map<String, Object> inst = instruction.getInstructions();
                                if (instruction.getType().equals("METER")) {
                                    Map<String, Object> inst = instruction.getInstructions();
                                    meterId = (String) inst.get("meterId");
//                                    meterId = (String)instruc.get("meterId");
                                    if (meterId.equals(id)) {
                                        flow = f;
                                    }
                                }
                            }
                        }
                        System.out.println(HttpTools.doDelete(new URL(EntornoTools.endpointMeters + "/" + sw + "/" + id)));

                        JOptionPane.showMessageDialog(this, "Meter " + id + " eliminado correctamente.", "Nuevo meter", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (IOException ex) {
                    System.err.println(ex.getMessage());
                    JOptionPane.showMessageDialog(this, "No se ha podido eliminar el meter de forma correcta.", "Error meter", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Elija un meter de la lista.", "Error meter", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonEliminarMeterMouseClicked

    /**
     * New VPLS button click event
     *
     * @param evt
     */
    private void jButtonNuevoVplsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonNuevoVplsMouseClicked
        try {
            // TODO add your handling code here:
            JDialog newVpls = new NuevaVpls();
            newVpls.setVisible(true);

        } catch (IOException ex) {
            Logger.getLogger(Principal.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonNuevoVplsMouseClicked

    /**
     * VPLS delete button click event
     *
     * @param evt
     */
    private void jButtonEliminarVplsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonEliminarVplsMouseClicked
        try {
            if (jTableVpls.getSelectedRow() != -1) {
                String vplsName = ((DefaultTableModel) jTableVpls.getModel()).getDataVector().elementAt(jTableVpls.getSelectedRow()).get(VPLS_NAME).toString();
                try {
                    int resultado = JOptionPane.showConfirmDialog(rootPane, "Desea eliminar la VPLS \"" + vplsName + "\"?", "Eliminar vpls", WIDTH);
                    if (resultado == JOptionPane.OK_OPTION) {
                        System.out.println(HttpTools.doDelete(new URL(EntornoTools.endpointVpls + "/" + vplsName)));
                        JOptionPane.showMessageDialog(this, "VPLS " + vplsName + " eliminada correctamente.", "VPLS eliminada", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (IOException ex) {
                    System.err.println(ex.getMessage());
                    JOptionPane.showMessageDialog(this, "No se ha podido eliminar la VPLS de forma correcta.", "Error VPLS", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Elija una vpls de la lista.", "Error VPLS", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonEliminarVplsMouseClicked

    /**
     * Statistic label click event
     *
     * @param evt
     */
    private void jLabelStatisticsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelStatisticsMouseClicked
        // TODO add your handling code here:
        CardLayout card = (CardLayout) jPanelCard.getLayout();
        card.show(jPanelCard, jPanelStatistics.getName());

        // Change label appearence
        EntornoTools.pressLabel(jLabelEnlaces, labels);

        // If any of these timers are, running stop them
        TimerTools.stopTimer(timerFlows);
        TimerTools.stopTimer(timerMeters);
        TimerTools.stopTimer(timerDevices);
        TimerTools.stopTimer(timerVpls);
    }//GEN-LAST:event_jLabelStatisticsMouseClicked

    /**
     * All flow delete button click event
     *
     * @param evt
     */
    private void jButtonEliminarAllFlujoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonEliminarAllFlujoMouseClicked
        // TODO add your handling code here:
        try {
//            if (jTableFlows.getSelectedRow() != -1) {
//            String id = ((DefaultTableModel) jTableFlows.getModel()).getDataVector().elementAt(jTableFlows.getSelectedRow()).get(ID).toString();
//            String sw = ((DefaultTableModel) jTableFlows.getModel()).getDataVector().elementAt(jTableFlows.getSelectedRow()).get(SWITCH).toString();
            try {
                int resultado = JOptionPane.showConfirmDialog(rootPane, "¿Desea eliminar todos los flujos?");
                if (resultado == JOptionPane.OK_OPTION) {
                    for (Switch s : Entorno.mapSwitches.values()) {
                        for (Flow f : s.getMapFlows().values()) {
                            if (f.getAppId().contains("fwd") || f.getAppId().contains("intent")) {
                                System.out.println(HttpTools.doDelete(new URL(EntornoTools.endpointFlows + "/" + s.getId() + "/" + f.getId())));
                            }
                        }
                    }
                }
//                JDialog acp = new NewOkCancelDialog(this, false, "Todos los flujos eliminados correctamente");
//                acp.setVisible(true);
//                acp.pack();
                JOptionPane.showMessageDialog(this, "Todos los flujos eliminados correctamente", "Exito", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                System.err.println(ex.getMessage());
                JOptionPane.showMessageDialog(this, "No se han podido eliminar los flujos.", "Error flujos", JOptionPane.ERROR_MESSAGE);
            }
//            } else {
//                JDialog err = new NewOkCancelDialog(this, false, "Elija un flujo de la lista");
//                err.setVisible(true);
//                err.pack();
//            }
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Elija un flujo de la lista.", "Error flujos", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonEliminarAllFlujoMouseClicked

    private void jListFlowsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListFlowsMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jListFlowsMouseClicked

    /**
     * Double click on flow table event
     *
     * @param evt
     */
    private void jTableFlowsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableFlowsMouseClicked
        if (evt.getClickCount() == 2) {
            Vector<Vector> vA = ((DefaultTableModel) jTableFlows.getModel()).getDataVector();
            int row = jTableFlows.convertRowIndexToModel(jTableFlows.getSelectedRow());
            Vector v = vA.elementAt(row);
            String idFlow = v.get(ID).toString();
            String idSwitch = v.get(SWITCH).toString();
            
            //Opens flow info window
            Flow f = Entorno.mapSwitches.get(idSwitch).getMapFlows().get(idFlow);
            FlowInfo info = new FlowInfo(this, true, f);
            info.setVisible(true);

        }
    }//GEN-LAST:event_jTableFlowsMouseClicked

    /**
     * Queue delete button event
     *
     * @param evt
     */
    private void jButtonDeleteQueueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDeleteQueueMouseClicked
        String queueId = "";
        try {
            if (jTableQueues.getSelectedRow() != -1) {
                String id = ((DefaultTableModel) jTableQueues.getModel()).getDataVector().elementAt(jTableQueues.getSelectedRow()).get(ID_QUEUE).toString();
                String sw = ((DefaultTableModel) jTableQueues.getModel()).getDataVector().elementAt(jTableQueues.getSelectedRow()).get(ID_SWITCH_QUEUE).toString();
                Flow flow = null;
                try {
                    
                    //Confirm dialog
                    int resultado = JOptionPane.showConfirmDialog(rootPane, "Desea eliminar la cola " + id + " del switch " + sw + "?", "Eliminar queue", WIDTH);
                    if (resultado == JOptionPane.OK_OPTION) {
                        //For all flows. Get flow with queue id given
                        for (Flow f : Entorno.mapSwitches.get(sw).getMapFlows().values()) {
                            FlowTreatment treatment = f.getFlowTreatment();
                            List<FlowInstruction> l = treatment.getListInstructions();
                            for (FlowInstruction instruction : l) {
                                if (instruction.getType().equals("QUEUE")) {
                                    Map<String, Object> inst = instruction.getInstructions();
                                    queueId = String.format("%.0f", inst.get("queueId"));
                                    if (queueId.equals(id)) {
                                        flow = f;
                                    }
                                }
                            }
                        }
                        System.out.println(HttpTools.doDelete(new URL(EntornoTools.endpointQueues + "/" + id)));
                        JOptionPane.showMessageDialog(this, "Cola " + id + " eliminada correctamente.", "Nueva cola", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (IOException ex) {
                    System.err.println(ex.getMessage());
                    JOptionPane.showMessageDialog(this, "No se ha podido eliminar la cola", "Error cola ", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Elija un Queue de la lista", "Error cola", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonDeleteQueueMouseClicked

    /**
     * new queue button click event
     *
     * @param evt
     */
    private void jButtonNewQueueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonNewQueueMouseClicked
        try {
            JDialog newQueue = new NuevoQueue();
            newQueue.setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonNewQueueMouseClicked

    /**
     * Change QoS tab event
     *
     * @param evt
     */
    private void jTabbedPaneQoSStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPaneQoSStateChanged
        Principal p = this;
        switch (jTabbedPaneQoS.getSelectedIndex()) {
            case TAB_METERS:
                //stop queue thread
                TimerTools.stopTimer(timerQueues);
                //start meters thread
                try {
                    //Update data
                    EntornoTools.descubrirEntorno();
                    EntornoTools.getMeters();
                } catch (MalformedURLException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(p, "ERROR. No se ha podido establecer conexión. No se pueden actualizar los datos.", "Error de conexión", JOptionPane.ERROR_MESSAGE);
                } catch (IOException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(p, "ERROR. No se ha podido establecer conexión. No se pueden actualizar los datos.", "Error de conexión", JOptionPane.ERROR_MESSAGE);
                }

                //Update GUI
                EntornoTools.actualizarGUIMetersTable(jTableMeters, Entorno.getAllMeters());
                EntornoTools.actualizarBoxSwitches(jComboBoxSwitchesMeters);

                //Timeout method
                ActionListener metersTimeout = new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        String idMeterSelected = null;
                        String idSwitchSelected = null;

                        try {
                            //Update data
                            EntornoTools.descubrirEntorno();
                            EntornoTools.getMeters();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }

                        // Retrieve selected item from meter table
                        if (jTableMeters.getSelectedRow() != -1) {
                            idMeterSelected = ((DefaultTableModel) jTableMeters.getModel()).getDataVector().get(jTableMeters.getSelectedRow()).get(ID).toString();
                            idSwitchSelected = ((DefaultTableModel) jTableMeters.getModel()).getDataVector().get(jTableMeters.getSelectedRow()).get(SWITCH).toString();
                        }

                        //Update GUI
                        EntornoTools.actualizarGUIMetersTable(jTableMeters, Entorno.getAllMeters());
                        EntornoTools.actualizarBoxSwitches(jComboBoxSwitchesMeters);

                        // Reselect meter in table
                        for (int i = 0; i < jTableMeters.getRowCount(); i++) {
                            if (((DefaultTableModel) jTableMeters.getModel()).getDataVector().get(i).get(ID).toString().equals(idMeterSelected) && ((DefaultTableModel) jTableMeters.getModel()).getDataVector().get(i).get(SWITCH).toString().equals(idSwitchSelected)) {
                                jTableMeters.setRowSelectionInterval(i, i);
                            }
                        }
                    }
                };

                // Run timer
                timerMeters = TimerTools.runTimer(timerMeters, metersTimeout);

                break;
            case TAB_QUEUES:
                //stop meters thread
                TimerTools.stopTimer(timerMeters);
                //start queue thread
                try {
                    //Update data
                    EntornoTools.descubrirEntorno();
                    EntornoTools.getQueues();
                } catch (MalformedURLException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(p, "ERROR. No se ha podido establecer conexión. No se pueden actualizar los datos.", "Error de conexión", JOptionPane.ERROR_MESSAGE);
                } catch (IOException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(p, "ERROR. No se ha podido establecer conexión. No se pueden actualizar los datos.", "Error de conexión", JOptionPane.ERROR_MESSAGE);
                }

                //Update GUI
                EntornoTools.actualizarGUIQueuesTable(jTableQueues, Entorno.getAllQueues());
//                EntornoTools.actualizarBoxSwitches(jComboBoxSwitchesMeters);

                //Timeout method
                ActionListener queuesTimeout = new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        String idQueueSelected = null;
                        String idSwitchSelected = null;

                        try {
                            //Update data
                            EntornoTools.descubrirEntorno();;
                            EntornoTools.getQueues();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }

                        // Retrieve selected item from meter table
                        if (jTableQueues.getSelectedRow() != -1) {
                            idQueueSelected = ((DefaultTableModel) jTableQueues.getModel()).getDataVector().get(jTableQueues.getSelectedRow()).get(ID_QUEUE).toString();
                            idSwitchSelected = ((DefaultTableModel) jTableQueues.getModel()).getDataVector().get(jTableQueues.getSelectedRow()).get(ID_SWITCH_QUEUE).toString();
                        }

                        //Update GUI
                        EntornoTools.actualizarGUIQueuesTable(jTableQueues, Entorno.getAllQueues());
//                        EntornoTools.actualizarBoxSwitches(jComboBoxSwitchesMeters);

                        // Reselect meter in table
                        for (int i = 0; i < jTableQueues.getRowCount(); i++) {
                            if (((DefaultTableModel) jTableQueues.getModel()).getDataVector().get(i).get(ID_QUEUE).toString().equals(idQueueSelected) && ((DefaultTableModel) jTableQueues.getModel()).getDataVector().get(i).get(ID_SWITCH_QUEUE).toString().equals(idSwitchSelected)) {
                                jTableQueues.setRowSelectionInterval(i, i);
                            }
                        }
                    }
                };

                // Run timer
                timerQueues = TimerTools.runTimer(timerQueues, queuesTimeout);

                break;

        }
    }//GEN-LAST:event_jTabbedPaneQoSStateChanged

    /**
     * Delete all queues button click event
     *
     * @param evt
     */
    private void jButtonDeleteAllQueueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDeleteAllQueueMouseClicked
        String queueId = "";
        String id = "";
        String sw = "";
        Flow flow = null;
        
        //Confirm dialog
        int resultado = JOptionPane.showConfirmDialog(rootPane, "Desea eliminar todas las colas?", "Eliminar todas", WIDTH);
        if (resultado == JOptionPane.OK_OPTION) {
            //For all rows
            for (int i = 0; i < jTableQueues.getRowCount(); i++) {
                //Retrieve id and switch
                id = ((DefaultTableModel) jTableQueues.getModel()).getDataVector().elementAt(i).get(ID_QUEUE).toString();
                sw = ((DefaultTableModel) jTableQueues.getModel()).getDataVector().elementAt(i).get(ID_SWITCH_QUEUE).toString();
                try {
                    //For all flows
                    for (Flow f : Entorno.mapSwitches.get(sw).getMapFlows().values()) {
                        FlowTreatment treatment = f.getFlowTreatment();
                        List<FlowInstruction> l = treatment.getListInstructions();
                        
                        //For all instructions. Get flow with queue Id given
                        for (FlowInstruction instruction : l) {
                            if (instruction.getType().equals("QUEUE")) {
                                Map<String, Object> inst = instruction.getInstructions();
                                queueId = String.format("%.0f", inst.get("queueId"));
                                if (queueId.equals(id)) {
                                    flow = f;
                                }
                            }
                        }
                    }
                    System.out.println(HttpTools.doDelete(new URL(EntornoTools.endpointQueues + "/" + id)));

                } catch (IOException ex) {
                    System.err.println(ex.getMessage());
                    JOptionPane.showMessageDialog(this, "No se ha podido borrar la cola " + queueId, "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_jButtonDeleteAllQueueMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDeleteAllQueue;
    private javax.swing.JButton jButtonDeleteQueue;
    private javax.swing.JButton jButtonDesconexion;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonEliminarAll;
    private javax.swing.JButton jButtonEliminarMeter;
    private javax.swing.JButton jButtonEliminarVpls;
    private javax.swing.JButton jButtonNewMeter;
    private javax.swing.JButton jButtonNewQueue;
    private javax.swing.JButton jButtonNuevo;
    private javax.swing.JButton jButtonNuevoVpls;
    private javax.swing.JComboBox<String> jComboBoxSwitches;
    private javax.swing.JComboBox<String> jComboBoxSwitchesMeters;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelEnlaces;
    private javax.swing.JLabel jLabelFlows;
    private javax.swing.JLabel jLabelQoS;
    private javax.swing.JLabel jLabelStatistics;
    private javax.swing.JLabel jLabelSwitch;
    private javax.swing.JLabel jLabelSwitch1;
    private javax.swing.JLabel jLabelTopologia;
    private javax.swing.JLabel jLabelUserName;
    private javax.swing.JLabel jLabelVpls;
    private javax.swing.JList<Flow> jListFlows;
    private javax.swing.JList<Link> jListLinks;
    private javax.swing.JPanel jPanelBanner;
    private javax.swing.JPanel jPanelCard;
    private javax.swing.JPanel jPanelDetalleFlow;
    private javax.swing.JPanel jPanelDetalleMeters;
    private javax.swing.JPanel jPanelDetalleVpls;
    private javax.swing.JPanel jPanelFlows;
    private javax.swing.JPanel jPanelLinks;
    private javax.swing.JPanel jPanelMenu;
    private javax.swing.JPanel jPanelMeters;
    private javax.swing.JPanel jPanelQueue;
    private javax.swing.JPanel jPanelQueueDetails;
    private javax.swing.JPanel jPanelStatistics;
    private javax.swing.JPanel jPanelTopologia;
    private javax.swing.JPanel jPanelVpls;
    private javax.swing.JScrollPane jScrollPaneFlows;
    private javax.swing.JScrollPane jScrollPaneLinks;
    private javax.swing.JScrollPane jScrollPaneMeters;
    private javax.swing.JScrollPane jScrollPaneQueues;
    private javax.swing.JScrollPane jScrollPaneStatistics;
    private javax.swing.JScrollPane jScrollPaneTable;
    private javax.swing.JScrollPane jScrollPaneVpls;
    private javax.swing.JTabbedPane jTabbedPaneQoS;
    private javax.swing.JTable jTableFlows;
    private javax.swing.JTable jTableMeters;
    private javax.swing.JTable jTableQueues;
    private javax.swing.JTable jTableVpls;
    // End of variables declaration//GEN-END:variables

}
